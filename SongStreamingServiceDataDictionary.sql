CREATE DATABASE TEST_SONG_STREAMING;

USE TEST_SONG_STREAMING;

-- Create ACCOUNT table
CREATE TABLE ACCOUNT (
    ACC_ID INT NOT NULL AUTO_INCREMENT,
    ACC_NAME VARCHAR(255),
    ACC_PASSWORD VARCHAR(255),
    PRIMARY KEY (ACC_ID)
);

-- Create CUSTOMER table
CREATE TABLE CUSTOMER (
    ACC_ID INT NOT NULL,
    SUBSCRIPTION_STATUS TINYINT(1),
    PRIMARY KEY (ACC_ID),
    FOREIGN KEY (ACC_ID) REFERENCES ACCOUNT(ACC_ID)
);

-- Create STAFF table
CREATE TABLE STAFF (
    ACC_ID INT NOT NULL,
    STAFF_NAME VARCHAR(255),
    PRIMARY KEY (ACC_ID),
    FOREIGN KEY (ACC_ID) REFERENCES ACCOUNT(ACC_ID)
);

-- Create SUBSCRIPTION table
CREATE TABLE SUBSCRIPTION (
    ACC_ID INT NOT NULL,
    SUB_ID INT NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (ACC_ID, SUB_ID),
    UNIQUE (SUB_ID),
    FOREIGN KEY (ACC_ID) REFERENCES ACCOUNT(ACC_ID)
);

-- Create LANGUAGE table
CREATE TABLE LANGUAGE (
    LANG_ID INT NOT NULL AUTO_INCREMENT,
    LANG_NAME VARCHAR(255),
    PRIMARY KEY (LANG_ID)
);

-- Create SINGER table
CREATE TABLE SINGER (
    SINGER_ID INT NOT NULL AUTO_INCREMENT,
    SINGER_NAME VARCHAR(255),
    PRIMARY KEY (SINGER_ID)
);

-- Create SONG table
CREATE TABLE SONG (
    SONG_ID INT NOT NULL AUTO_INCREMENT,
    SONG_TITLE VARCHAR(255),
    SONG_RELEASE_YEAR INT,
    SONG_DURATION TIME,
    SINGER_ID INT,
    LANG_ID INT,
    PRIMARY KEY (SONG_ID),
    FOREIGN KEY (SINGER_ID) REFERENCES SINGER(SINGER_ID),
    FOREIGN KEY (LANG_ID) REFERENCES LANGUAGE(LANG_ID)
);

-- Create PLAYLIST table
CREATE TABLE PLAYLIST (
    PLAYLIST_ID INT NOT NULL AUTO_INCREMENT,
    ACC_ID INT,
    SUB_ID INT,
    PLAYLIST_NAME VARCHAR(255),
    PRIMARY KEY (PLAYLIST_ID),
    FOREIGN KEY (ACC_ID) REFERENCES ACCOUNT(ACC_ID),
    FOREIGN KEY (SUB_ID) REFERENCES SUBSCRIPTION(SUB_ID)
);

-- Create MANAGE table
CREATE TABLE MANAGE (
    SONG_ID INT,
    ACC_ID INT,
    PRIMARY KEY (SONG_ID, ACC_ID),
    FOREIGN KEY (SONG_ID) REFERENCES SONG(SONG_ID),
    FOREIGN KEY (ACC_ID) REFERENCES ACCOUNT(ACC_ID)
);

-- Create STORE table
CREATE TABLE STORE (
    PLAYLIST_ID INT,
    SONG_ID INT,
    PRIMARY KEY (PLAYLIST_ID, SONG_ID),
    FOREIGN KEY (PLAYLIST_ID) REFERENCES PLAYLIST(PLAYLIST_ID),
    FOREIGN KEY (SONG_ID) REFERENCES SONG(SONG_ID)
);

-- Create HISTORY table
CREATE TABLE HISTORY (
    SONG_ID INT,
    ACC_ID INT,
    DURATION_LISTENED TIME,
    PRIMARY KEY (SONG_ID, ACC_ID),
    FOREIGN KEY (SONG_ID) REFERENCES SONG(SONG_ID),
    FOREIGN KEY (ACC_ID) REFERENCES ACCOUNT(ACC_ID)
);
